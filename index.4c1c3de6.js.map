{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAgB,SAAS,aAAa,CAAC,MACvC,EAAa,EAAG,SAAS,gBAAgB,CAAC,OAE1C,EAAc,SAAC,CAArB,EAAgC,OAAA,OAAO,EAAO,OAAO,CAAC,IAAK,IAAI,KAAK,CAAC,G,EAGnE,AAeO,EAfF,IAAI,CACP,SAAC,CAAA,CAAG,CADN,EACY,OAAA,EAAY,EAAE,OAAO,CAAC,MAAM,EAAI,EAAY,EAAE,OAAO,CAAC,MAAM,C,GAGxE,AAAA,EAAc,MAAM,CAApB,KAAA,CAAA,EAAqB,EAWd,IAPP,AAQW,EARN,GAAG,CAAC,SAAC,CAAV,EAAwB,MAAA,CACtB,KAAM,EAAS,SAAS,CACxB,SAAU,EAAS,OAAO,CAAC,QAAQ,CACnC,OAAQ,EAAS,OAAO,CAAC,MAAM,CAC/B,IAAK,EAAS,OAAO,CAAC,GAAG,AAC3B,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar employeesList = document.querySelector(\"ul\");\nvar employees = _to_consumable_array(document.querySelectorAll(\"li\"));\nvar salaryToNum = function(salary) {\n    return Number(salary.replace(\",\", \"\").slice(1));\n};\nvar sortList = function(list) {\n    var _employeesList;\n    list.sort(function(a, b) {\n        return salaryToNum(b.dataset.salary) - salaryToNum(a.dataset.salary);\n    });\n    (_employeesList = employeesList).append.apply(_employeesList, _to_consumable_array(list));\n};\nvar getEmployees = function(list) {\n    return list.map(function(employee) {\n        return {\n            name: employee.innerText,\n            position: employee.dataset.position,\n            salary: employee.dataset.salary,\n            age: employee.dataset.age\n        };\n    });\n};\nsortList(employees);\ngetEmployees(employees);\n\n//# sourceMappingURL=index.4c1c3de6.js.map\n","'use strict';\n\nconst employeesList = document.querySelector('ul');\nconst employees = [...document.querySelectorAll('li')];\n\nconst salaryToNum = (salary) => Number(salary.replace(',', '').slice(1));\n\nconst sortList = (list) => {\n  list.sort(\n    (a, b) => salaryToNum(b.dataset.salary) - salaryToNum(a.dataset.salary),\n  );\n\n  employeesList.append(...list);\n};\n\nconst getEmployees = (list) =>\n  list.map((employee) => ({\n    name: employee.innerText,\n    position: employee.dataset.position,\n    salary: employee.dataset.salary,\n    age: employee.dataset.age,\n  }));\n\nsortList(employees);\ngetEmployees(employees);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","employeesList","document","querySelector","employees","querySelectorAll","salaryToNum","salary","Number","replace","list","sort","a","b","dataset","append","apply","map","employee","innerText","position","age"],"version":3,"file":"index.4c1c3de6.js.map"}